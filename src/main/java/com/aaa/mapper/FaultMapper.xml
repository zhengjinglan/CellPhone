<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aaa.dao.FaultMapper">
  <resultMap id="BaseResultMap" type="com.aaa.entity.Fault">
    <id column="fault_id" jdbcType="INTEGER" property="faultId" />
    <result column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="model_id" jdbcType="INTEGER" property="modelId" />
    <result column="fault_price" jdbcType="DECIMAL" property="faultPrice" />
    <result column="fault_name" jdbcType="VARCHAR" property="faultName" />
    <result column="fault_description" jdbcType="VARCHAR" property="faultDescription" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
    <result column="prediction_fault" jdbcType="VARCHAR" property="predictionFault" />
    <result column="prediction_solution" jdbcType="VARCHAR" property="predictionSolution" />
    <result column="operator" jdbcType="VARCHAR" property="operator" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fault_id, type_id, model_id, fault_price, fault_name, fault_description, gmt_create, 
    gmt_modified, prediction_fault, prediction_solution, operator
  </sql>
  <select id="selectByExample" parameterType="com.aaa.entity.FaultExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fault
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from fault
    where fault_id = #{faultId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from fault
    where fault_id = #{faultId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.aaa.entity.FaultExample">
    delete from fault
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.aaa.entity.Fault">
    <selectKey keyProperty="faultId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into fault (type_id, model_id, fault_price, 
      fault_name, fault_description, gmt_create, 
      gmt_modified, prediction_fault, prediction_solution, 
      operator)
    values (#{typeId,jdbcType=INTEGER}, #{modelId,jdbcType=INTEGER}, #{faultPrice,jdbcType=DECIMAL}, 
      #{faultName,jdbcType=VARCHAR}, #{faultDescription,jdbcType=VARCHAR},now(), 
      now(), #{predictionFault,jdbcType=VARCHAR}, #{predictionSolution,jdbcType=VARCHAR}, 
      #{operator,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.aaa.entity.Fault">
    <selectKey keyProperty="faultId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into fault
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="typeId != null">
        type_id,
      </if>
      <if test="modelId != null">
        model_id,
      </if>
      <if test="faultPrice != null">
        fault_price,
      </if>
      <if test="faultName != null">
        fault_name,
      </if>
      <if test="faultDescription != null">
        fault_description,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
      <if test="predictionFault != null">
        prediction_fault,
      </if>
      <if test="predictionSolution != null">
        prediction_solution,
      </if>
      <if test="operator != null">
        operator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="modelId != null">
        #{modelId,jdbcType=INTEGER},
      </if>
      <if test="faultPrice != null">
        #{faultPrice,jdbcType=DECIMAL},
      </if>
      <if test="faultName != null">
        #{faultName,jdbcType=VARCHAR},
      </if>
      <if test="faultDescription != null">
        #{faultDescription,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="predictionFault != null">
        #{predictionFault,jdbcType=VARCHAR},
      </if>
      <if test="predictionSolution != null">
        #{predictionSolution,jdbcType=VARCHAR},
      </if>
      <if test="operator != null">
        #{operator,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.aaa.entity.FaultExample" resultType="java.lang.Long">
    select count(*) from fault
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update fault
    <set>
      <if test="record.faultId != null">
        fault_id = #{record.faultId,jdbcType=INTEGER},
      </if>
      <if test="record.typeId != null">
        type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.modelId != null">
        model_id = #{record.modelId,jdbcType=INTEGER},
      </if>
      <if test="record.faultPrice != null">
        fault_price = #{record.faultPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.faultName != null">
        fault_name = #{record.faultName,jdbcType=VARCHAR},
      </if>
      <if test="record.faultDescription != null">
        fault_description = #{record.faultDescription,jdbcType=VARCHAR},
      </if>
      
      <if test="record.predictionFault != null">
        prediction_fault = #{record.predictionFault,jdbcType=VARCHAR},
      </if>
      <if test="record.predictionSolution != null">
        prediction_solution = #{record.predictionSolution,jdbcType=VARCHAR},
      </if>
      <if test="record.operator != null">
        operator = #{record.operator,jdbcType=VARCHAR},
      </if>
     
        gmt_modified = now(),
     
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update fault
    set fault_id = #{record.faultId,jdbcType=INTEGER},
      type_id = #{record.typeId,jdbcType=INTEGER},
      model_id = #{record.modelId,jdbcType=INTEGER},
      fault_price = #{record.faultPrice,jdbcType=DECIMAL},
      fault_name = #{record.faultName,jdbcType=VARCHAR},
      fault_description = #{record.faultDescription,jdbcType=VARCHAR},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      prediction_fault = #{record.predictionFault,jdbcType=VARCHAR},
      prediction_solution = #{record.predictionSolution,jdbcType=VARCHAR},
      operator = #{record.operator,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.aaa.entity.Fault">
    update fault
    <set>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="modelId != null">
        model_id = #{modelId,jdbcType=INTEGER},
      </if>
      <if test="faultPrice != null">
        fault_price = #{faultPrice,jdbcType=DECIMAL},
      </if>
      <if test="faultName != null">
        fault_name = #{faultName,jdbcType=VARCHAR},
      </if>
      <if test="faultDescription != null">
        fault_description = #{faultDescription,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
      <if test="predictionFault != null">
        prediction_fault = #{predictionFault,jdbcType=VARCHAR},
      </if>
      <if test="predictionSolution != null">
        prediction_solution = #{predictionSolution,jdbcType=VARCHAR},
      </if>
      <if test="operator != null">
        operator = #{operator,jdbcType=VARCHAR},
      </if>
    </set>
    where fault_id = #{faultId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.aaa.entity.Fault">
    update fault
    set type_id = #{typeId,jdbcType=INTEGER},
      model_id = #{modelId,jdbcType=INTEGER},
      fault_price = #{faultPrice,jdbcType=DECIMAL},
      fault_name = #{faultName,jdbcType=VARCHAR},
      fault_description = #{faultDescription,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      prediction_fault = #{predictionFault,jdbcType=VARCHAR},
      prediction_solution = #{predictionSolution,jdbcType=VARCHAR},
      operator = #{operator,jdbcType=VARCHAR}
    where fault_id = #{faultId,jdbcType=INTEGER}
  </update>
  <select id="queryPage" resultType="map" parameterType="Fault">
  		select f.fault_id faultId,f.fault_price faultPrice,
		f.fault_name faultName,f.fault_description faultDescription,f.model_id modelId,
		f.gmt_create gmtCreate,f.gmt_modified gmtModified,f.type_id typeId,
		f.prediction_fault predictionFault,f.prediction_solution predictionSolution,
		f.operator operator,type.type_id,type.type_name typeName,
		model.model_id,model.model_name modelName 
		from fault f
		LEFT join fault_type type
		on f.type_id=type.type_id
		LEFT join model model
		on model.model_id=f.model_id
		<where>
	<if test="param1 != null and param1.modelId != null">
     	f.model_id=#{param1.modelId} and
    </if>
    <if test="param1 != null and param1.typeId != null">
     	f.type_id=#{param1.typeId} 
    </if>
  <!--    order by f.fault_id desc -->
    </where>
     <if test="param2 != null and param3 !=null">
        limit #{param2},#{param3}
    </if>
     
  </select>
    <select id="queryFault" parameterType="com.aaa.entity.Fault" resultMap="BaseResultMap">
  	select * from fault
  	<where>
  		<if test="modelId !=null">
  			model_id=#{modelId}
  		</if>
  	</where>
  </select>
</mapper>