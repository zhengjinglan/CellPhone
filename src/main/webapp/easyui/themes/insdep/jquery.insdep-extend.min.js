/*
    jQuery EasyUI 1.5.1 - Insdep of theme
    www.insdep.com
    20170211
    QQ交流群：184075694
*/


jQuery(function($){jQuery.ajaxSetup({cache:false});});/*重置ajax并取消缓存*/

/*初始化语言*/
if ($.fn.pagination){
	$.fn.pagination.defaults.beforePageText = '第';
	$.fn.pagination.defaults.afterPageText = '共 {pages} 页';
	$.fn.pagination.defaults.displayMsg = '显示 {from} 到 {to},共 {total} 记录';
}
if ($.fn.datagrid){
	$.fn.datagrid.defaults.loadMsg = '正在处理，请稍待。。。';
}
if ($.fn.treegrid && $.fn.datagrid){
	$.fn.treegrid.defaults.loadMsg = $.fn.datagrid.defaults.loadMsg;
}
if ($.messager){
	$.messager.defaults.ok = '确定';
	$.messager.defaults.cancel = '取消';
}
$.map(['validatebox','textbox','passwordbox','filebox','searchbox',
		'combo','combobox','combogrid','combotree',
		'datebox','datetimebox','numberbox',
		'spinner','numberspinner','timespinner','datetimespinner'], function(plugin){
	if ($.fn[plugin]){
		$.fn[plugin].defaults.missingMessage = '该输入项为必输项';
	}
});
if ($.fn.validatebox){
	$.fn.validatebox.defaults.rules.email.message = '请输入有效的电子邮件地址';
	$.fn.validatebox.defaults.rules.url.message = '请输入有效的URL地址';
	$.fn.validatebox.defaults.rules.length.message = '输入内容长度必须介于{0}和{1}之间';
	$.fn.validatebox.defaults.rules.remote.message = '请修正该字段';
}
if ($.fn.calendar){
	$.fn.calendar.defaults.weeks = ['日','一','二','三','四','五','六'];
	$.fn.calendar.defaults.months = ['一月','二月','三月','四月','五月','六月','七月','八月','九月','十月','十一月','十二月'];
}
if ($.fn.datebox){
	$.fn.datebox.defaults.currentText = '今天';
	$.fn.datebox.defaults.closeText = '关闭';
	$.fn.datebox.defaults.okText = '确定';
	$.fn.datebox.defaults.formatter = function(date){
		var y = date.getFullYear();
		var m = date.getMonth()+1;
		var d = date.getDate();
		return y+'-'+(m<10?('0'+m):m)+'-'+(d<10?('0'+d):d);
	};
	$.fn.datebox.defaults.parser = function(s){
		if (!s) return new Date();
		var ss = s.split('-');
		var y = parseInt(ss[0],10);
		var m = parseInt(ss[1],10);
		var d = parseInt(ss[2],10);
		if (!isNaN(y) && !isNaN(m) && !isNaN(d)){
			return new Date(y,m-1,d);
		} else {
			return new Date();
		}
	};
}
if ($.fn.datetimebox && $.fn.datebox){
	$.extend($.fn.datetimebox.defaults,{
		currentText: $.fn.datebox.defaults.currentText,
		closeText: $.fn.datebox.defaults.closeText,
		okText: $.fn.datebox.defaults.okText
	});
}
if ($.fn.datetimespinner){
	$.fn.datetimespinner.defaults.selections = [[0,4],[5,7],[8,10],[11,13],[14,16],[17,19]]
}


/*初始化*/
//待修复 组件设置label后，高度失效问题
$.extend($.fn.tabs.defaults,{tabHeight:36}); 
$.extend($.fn.textbox.defaults,{height:34});
$.extend($.fn.passwordbox.defaults,{height:34});
$.extend($.fn.combo.defaults,{height:34});
$.extend($.fn.combobox.defaults,{height:34});
$.extend($.fn.combogrid.defaults,{height:34});
$.extend($.fn.combotree.defaults,{height:34});
$.extend($.fn.combotreegrid.defaults,{height:34});

$.extend($.messager.defaults,{width:340}); 


$.extend($.fn.datebox.defaults,{
	height:34,
	panelWidth:220
	/*
	此处待修复，无法选择日期错误
	,
	formatter:function(date){
		var y = date.getFullYear();
		var m = date.getMonth()+1;
		var d = date.getDate();
		return y+"年"+m+"月"+d+"日";
	}*/
});
$.extend($.fn.datetimebox.defaults,{
	height:34,
	panelWidth:220
	/*
	此处待修复，无法选择日期错误
	,
	formatter:function(date){
		var y = date.getFullYear();
		var m = date.getMonth()+1;
		var d = date.getDate();
		var H = date.getHours();       //获取当前小时数(0-23)
		var i = date.getMinutes();     //获取当前分钟数(0-59)
		var s = date.getSeconds();     //获取当前秒数(0-59)
		return y+"年"+m+"月"+d+"日 "+H+":"+i+":"+s;
	}*/
});
$.extend($.fn.datetimespinner.defaults,{height:34});
$.extend($.fn.numberbox.defaults,{height:34});
$.extend($.fn.spinner.defaults,{height:34});

$.extend($.fn.numberspinner.defaults,{height:34});//上线数字不能使用
$.extend($.fn.searchbox.defaults,{height:34});
$.extend($.fn.filebox.defaults,{height:34});

$.extend($.fn.validatebox.defaults,{height:34});
$.extend($.fn.validatebox.defaults.tipOptions, {
	onShow: function() {
		$(this).tooltip("tip").css({
			color: "#fff",
			border: "none",
			backgroundColor: "#ff7e00"
		});
	}
}); //重置tipOptions的样式

;(function($){
	$.insdep={
		ajax:function(c){
			var d={
				url:"",
				async:false,
				cache:false,
				type:"POST",
				dataType:"html",
				beforeSend:function(){
					$.messager.progress();
				},
				complete:function(){
					$.messager.progress('close');
				}
			};
			var n=$.extend(true,d,c);
			$.ajax(n);
		},
		error:function(result) {
			$('<div/>').window({
				id:"insdep-error-debug-window",
				cache:false,
			    width : 720,
			    height : 480,
			    modal : true,
				title:"错误",
				content:"<div style='padding:15px;overflow:hidden;height:auto;clear:both;'><b>Return Error</b><br/>"+result+"<br/></div>",
				border:false,
				collapsible:false,
				minimizable:false,
				maximizable:false,
				queryParams:"",
				onClose:function() {
					$(this).window('destroy');
				},
				buttons:[]
			});
		},
		window:function(c){
			var d={
               id:"temp-window",
               href:"",
               cache:false,
               method:"post",
               width : 680,
               height : 550,
               modal : true,
               title:"",
               border:false,
               collapsible:false,
               minimizable:false,
               maximizable:false,
               queryParams:"",
               onClose:function() {
                  $(this).window('destroy');
               },
               buttons:[]
			};
			var n=$.extend(true,d,c);
			$('<div/>').window(n);
		},
		control:function(url,queryParams){
			$('#control').panel({    
				href:url,
				cache:false,
				method:"post",
				queryParams:queryParams?queryParams:{},    
				onLoad:function(){    
					//alert('loaded successfully');    
				},
				onBeforeLoad:function(){
					$(this).panel('clear');
				}
			}); 
		}
	};
})(jQuery);

(function($) {
    $.extend({
        datetime: {
            /**
             * 当前时间戳
             * @return <int>        unix时间戳(秒)  
             */
            CurTime: function(){
                return Date.parse(new Date())/1000;
            },
            /**              
             * 日期 转换为 Unix时间戳
             * @param <string> 2014-01-01 20:20:20  日期格式              
             * @return <int>        unix时间戳(秒)              
             */
            DateToUnix: function(string) {
                var f = string.split(' ', 2);
                var d = (f[0] ? f[0] : '').split('-', 3);
                var t = (f[1] ? f[1] : '').split(':', 3);
                return (new Date(
                        parseInt(d[0], 10) || null,
                        (parseInt(d[1], 10) || 1) - 1,
                        parseInt(d[2], 10) || null,
                        parseInt(t[0], 10) || null,
                        parseInt(t[1], 10) || null,
                        parseInt(t[2], 10) || null
                        )).getTime() / 1000;
            },
            /**              
             * 时间戳转换日期              
             * @param <int> unixTime    待时间戳(秒)              
             * @param <bool> isFull    返回完整时间(Y-m-d 或者 Y-m-d H:i:s)              
             * @param <int>  timeZone   时区              
             */
            UnixToDate: function(unixTime, isFull, timeZone) {
                if (typeof (timeZone) == 'number')
                {
                    unixTime = parseInt(unixTime) + parseInt(timeZone) * 60 * 60;
                }
                var time = new Date(unixTime * 1000);
                var ymdhis = "";
                ymdhis += time.getUTCFullYear() + "-";
                ymdhis += (time.getUTCMonth()+1) + "-";
                ymdhis += time.getUTCDate();
                if (isFull === true)
                {
                    ymdhis += " " + time.getUTCHours() + ":";
                    ymdhis += time.getUTCMinutes() + ":";
                    ymdhis += time.getUTCSeconds();
                }
                return ymdhis;
            }
        }
    });
})(jQuery);

/*用JavaScript实现PHP的urlencode与urldecode函数*/

function urlencode(clearString) 
{
    var output = '';
    var x = 0;
     
    clearString = utf16to8(clearString.toString());
    var regex = /(^[a-zA-Z0-9-_.]*)/;
 
    while (x < clearString.length) 
    {
        var match = regex.exec(clearString.substr(x));
        if (match != null && match.length > 1 && match[1] != '') 
        {
            output += match[1];
            x += match[1].length;
        } 
        else
        {
            if (clearString[x] == ' ')
                output += '+';
            else
            {
                var charCode = clearString.charCodeAt(x);
                var hexVal = charCode.toString(16);
                output += '%' + ( hexVal.length < 2 ? '0' : '' ) + hexVal.toUpperCase();
            }
            x++;
        }
    }
 
    function utf16to8(str) 
    {
        var out, i, len, c;
 
        out = "";
        len = str.length;
        for(i = 0; i < len; i++) 
        {
            c = str.charCodeAt(i);
            if ((c >= 0x0001) && (c <= 0x007F)) 
            {
                out += str.charAt(i);
            } 
            else if (c > 0x07FF) 
            {
                out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
                out += String.fromCharCode(0x80 | ((c >> 6) & 0x3F));
                out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
            } 
            else
            {
                out += String.fromCharCode(0xC0 | ((c >> 6) & 0x1F));
                out += String.fromCharCode(0x80 | ((c >> 0) & 0x3F));
            }
        }
        return out;
    }
 
    return output;
}

function urldecode(encodedString)
{
    var output = encodedString;
    var binVal, thisString;
    var myregexp = /(%[^%]{2})/;
    function utf8to16(str)
    {
        var out, i, len, c;
        var char2, char3;
 
        out = "";
        len = str.length;
        i = 0;
        while(i < len) 
        {
            c = str.charCodeAt(i++);
            switch(c >> 4)
            { 
                case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                out += str.charAt(i-1);
                break;
                case 12: case 13:
                char2 = str.charCodeAt(i++);
                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                break;
                case 14:
                char2 = str.charCodeAt(i++);
                char3 = str.charCodeAt(i++);
                out += String.fromCharCode(((c & 0x0F) << 12) |
                        ((char2 & 0x3F) << 6) |
                        ((char3 & 0x3F) << 0));
                break;
            }
        }
        return out;
    }
    while((match = myregexp.exec(output)) != null
                && match.length > 1
                && match[1] != '')
    {
        binVal = parseInt(match[1].substr(1),16);
        thisString = String.fromCharCode(binVal);
        output = output.replace(match[1], thisString);
    }
     
    //output = utf8to16(output);
    output = output.replace(/\\+/g, " ");
    output = utf8to16(output);
    return output;
}
